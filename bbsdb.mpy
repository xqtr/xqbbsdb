from mystic_bbs import *

import sys,os
import datetime
import struct
import json

#=============================================================================
# DO NOT EDIT BELOW!!!
#=============================================================================

cfg = getcfg()
appdir = cfg['script']+'xqbbsdb'+os.sep
datadir=cfg['data']
sys.path.append(appdir)
import bbsdbvar
import bbsdbcom
import ansiviewer

tempdir = cfg['temp']
logdir = cfg['logs']
dbfile = cfg['data']+bbsdbvar.prefix+'.sql'
user  = getuser(0)
sysop_level = 255
#load config file...
cnf = {}
if os.path.isfile(cfg['data']+bbsdbvar.prefix+'.cfg'):
  cnf = bbsdbcom.loadjson2list(cfg['data']+bbsdbvar.prefix+'.cfg')
else:
  logerror('Could not load config file ['+cfg['data']+bbsdbvar.prefix+'.cfg]. Make sure it exists.')
  writeln('Could not load config file ['+cfg['data']+bbsdbvar.prefix+'.cfg]. Make sure it exists.')
  
scrollbar = {"enable":True,"hichar":chr(178),"lochar":chr(177),"hiatt":12,"loatt":4}
KEY_UP       = chr(72)       # Some keyboard code defines returned by input functions
KEY_DOWN     = chr(80)
KEY_ESCAPE   = chr(27)
KEY_ENTER    = chr(13)
KEY_TAB      = chr(9)
KEY_LEFT     = chr(75)
KEY_RIGHT    = chr(77)
KEY_PGUP    = chr(73)
KEY_PGDN    = chr(81)
KEY_END     = chr(79)
KEY_HOME    = chr(71)
KEY_CTRLA   = chr(1)
KEY_CTRLR   = chr(18)
KEY_CTRLZ   = chr(26)

def issysop():
  if user['level'] >= sysop_level:
    return True
  else:
    return False

def cleararea(x1,y1,x2,y2,bg):
  for i in range(y2-y1):
    gotoxy(x1,y1+i)
    write(bg*(x2-x1+1))

def center(a,y,s):
  writexy(40-len(s) // 2,y,a,s)

def writexy(x,y,a,s):
  gotoxy(x,y)
  textcolor(a)
  write(s)

def drawbg(name):
  write('|07|16|CL')
  showfile(appdir+'images'+os.sep+'main.ans',0,False,False,False)
  writexy(cnf['tree_title_x'],cnf['tree_title_y'],cnf['tree_title_at'],name[:cnf['tree_x2']-cnf['tree_x1']-1])

def loadlist(fl):
  res = []
  
  if not os.path.isfile(appdir+fl):
    return res
  
  with open(appdir+fl,'r') as f:
    items = f.readlines()

  for i in range(len(items)):
    if items[i][:1].lstrip()=='#' or items[i][:1].lstrip()=='':
      continue
    else:
      fields = items[i].split(';')
      if user['level']>=int(fields[2]):
        if len(fields) == 3:
          res.append({'name':fields[0],'type':fields[1],'acs':fields[2]})
        elif len(fields) == 4:
          res.append({'name':fields[0],'type':fields[1],'acs':fields[2],'sql':replacevars(fields[3].strip('\n')), 'desc':''})
        elif len(fields) == 5:
          res.append({'name':fields[0],'type':fields[1],'acs':fields[2],'sql':replacevars(fields[3]), 'desc':fields[4].strip('\n')})
        elif len(fields) == 6:
          res.append({'name':fields[0],'type':fields[1],'acs':fields[2],'sql':replacevars(fields[3]), 'desc':fields[4],'image':fields[5].strip('\n')})
  return res

def replacevars(s):
  f = str(s).replace('{script}',getcfg()['script'])
  f = f.replace('{system}',getcfg()['system'])
  f = f.replace('{text}',getcfg()['text'])
  f = f.replace('{theme}',getcfg()['theme'])
  f = f.replace('{deftheme}',getcfg()['deftheme'])
  return f

def treelist(items,x1,y1,x2,y2,hc=15,nc=7,sel=1,sb=scrollbar):
    global exit_keys
    global exit_code
    global cnf
    
    search_txt = ''
    search_x = 12
    search_y = 23
    search_cl= 8
    
    def updatebar():
        if sb["enable"] == False: Return
        for i in range(0,y2-y1+1):
            writexy(x2,y1+i,sb["loatt"],sb["lochar"])
        if len(items) < 2:
            y = 0
        else:
            y = (selbar * (y2-y1)) // (len(items)-1)
        writexy(x2,y1+y,sb["hiatt"],sb["hichar"])
    
    if len(items)<1:
      return -1
    exit_code = ""
    key = ""
    value = -1
    done = False
    if sel <= len(items):
        top = sel-(y2-y1)
        if top < 1: top = 0
    else:
        top = 0
    if sel <= len(items):
        selbar = sel
    else:
        selbar = 0
    if items[selbar]['type'] == 'vbase':
        selbar +=1
    
    drawbg('')
    while done == False and not shutdown():
        #writexy(1,1,7,str(top)+"/"+str(selbar)+"/"+str(len(items)))
        gotoxy(x1,y1)
        y = top
        while y1+y-top<=y2:
            if y<len(items):
                if items[y]['type'] == 'group':
                    writexy(x1,y1+y-top,cnf['group_cl'],items[y]['name'].ljust(x2-x1, chr(cnf['group_fill_ch']))[:x2-x1])
                elif items[y]['type'] == 'mbase':
                    writexy(x1,y1+y-top,cnf['mbase_cl'],items[y]['name'].ljust(x2-x1, " ")[:x2-x1])
                elif items[y]['type'] == 'vbase':
                    writexy(x1,y1+y-top,cnf['vbase_cl'],items[y]['name'].ljust(x2-x1, " ")[:x2-x1])
            else:
                writexy(x1,y1+y-top,nc," ".ljust(x2-x1, " ")[:x2-x1])
            y += 1
        if items[selbar]['type'] == 'vbase':
            writexy(x1,y1+selbar-top,cnf['vbase_clsel'],items[selbar]['name'].ljust(x2-x1, " ")[:x2-x1])
        elif items[selbar]['type'] == 'mbase':
            writexy(x1,y1+selbar-top,cnf['mbase_clsel'],items[selbar]['name'].ljust(x2-x1, " ")[:x2-x1])
        textcolor(7)
        cleararea(cnf['view_x1'],cnf['view_y1'],cnf['view_x2'],cnf['view_y2'],' ')

        ddesc = items[selbar].get('desc')
        if ddesc:
            gotoxy(27,10)
            write(ddesc)
        if items[selbar].get('image'):
          with open(appdir+'logos'+os.sep+items[selbar]['image'],'r') as fl:
            lines = fl.read().splitlines()
          for i,ln in enumerate(lines):
            writexy(27,4+i,7,ln)       
        
        updatebar()
        gotoxy(1,25)
        
        key, extended = getkey()
        
        if extended:
          
          if key == KEY_UP:
              selbar=selbar-1
              if items[selbar]['type'] == 'group':
                  selbar -=1
              if selbar < 1:
                  selbar = 1
                  top = 0
                  if items[selbar]['type'] == 'group':
                    selbar +=1
              if selbar < top:
                  top = selbar
                  if items[selbar]['type'] == 'group':
                    selbar -=1
          elif key == KEY_PGUP:
              selbar = selbar - (y2-y1)
              if selbar < 0:
                  selbar = 0
                  top = 0
                  if items[selbar]['type'] == 'group':
                      selbar +=1
              else:
                  top = top - (y2-y1)
                  if top < 0:
                      top = 0
          elif key == KEY_PGDN:
              selbar = selbar+(y2-y1)
              if selbar > len(items)-1:
                  selbar = len(items)-1
              top = top+(y2-y1)
              if top > len(items)-1-(y2-y1):
                  top = len(items)-1-(y2-y1)
                  if top < 0:
                      top = 0
              if items[selbar]['type'] == 'group' and selbar < len(items):
                  selbar +=1
          elif key == KEY_END:
              selbar=len(items)-1
              if len(items)-(y2-y1)-1 > 0:
                  top = len(items)-(y2-y1)-1
              else:
                  top = 0
              if items[selbar]['type'] == 'group':
                  selbar -=1
          elif key == KEY_HOME:
              selbar=0
              top = 0
              if items[selbar]['type'] == 'group':
                    selbar +=1
          elif key == KEY_DOWN: 
              selbar+=1
              if selbar > len(items)-1:
                  selbar = len(items)-1
                  if items[selbar]['type'] == 'group':
                      selbar -= 1
              else:
                  if items[selbar]['type'] == 'group':
                      selbar +=1
                      if selbar-top > y2-y1:
                          top += 1
              if selbar-top > y2-y1:
                  top += 1
        else:
          key = key.upper()
          if key == KEY_ENTER:
              value = selbar
              if items[selbar]['type'] == 'mbase':
                  bbstree(items[selbar]['name'],items[selbar]['sql'],cnf['tree_x1'],cnf['tree_y1'],cnf['tree_x2'],cnf['tree_y2'],cnf['mbase_clsel'],cnf['mbase_cl'])
              drawbg('')
          elif key == KEY_ESCAPE:
              done = True
          elif key == 'H':    
              write('|07|16|CL')
              showfile(appdir+'images'+os.sep+'help.ans',0,False,False,False)
              if issysop():
                  writexy(4,18,13,'/E  File Directory Editor')
                  writexy(4,19,13,'/U  Mass Upload Files')
                  writexy(4,20,13,'/F  File Base Editor')
                  writexy(4,21,13,'/J  File Group Editor')
              getkey()
              drawbg('Sort By...')
    return value

def bbstree(name,sql,x1,y1,x2,y2,hc=15,nc=7,sel=0,sb=scrollbar):
    global exit_keys
    global exit_code
    redraw = True
    
    def updatebar():
        if sb["enable"] == False: Return
        for i in range(0,y2-y1+1):
            writexy(x2,y1+i,sb["loatt"],sb["lochar"])
        if len(items) < 2:
            y = 0
        else:
            y = (selbar * (y2-y1)) // (len(items)-1)
        writexy(x2,y1+y,sb["hiatt"],sb["hichar"])
    
    conn = bbsdbcom.sqlconnect(dbfile)
    cursor = conn.cursor()
    cursor.execute(sql)
    
    items = cursor.fetchall()
    
#    print(items)
#    bbsdbcom.pause()
    
    if len(items)<1:
        bbsdbcom.msgdialog(' Error ','No items to display.')
        return -1
        
    exit_code = ""
    key = ""
    value = -1
    done = False
    if sel <= len(items):
        top = sel-(y2-y1)
        if top < 1: top = 0
    else:
        top = 0
    if sel <= len(items):
        selbar = sel
    else:
        selbar = 0
    
    drawbg(name)
    width = cnf['view_x2']-cnf['view_x1']
    cleararea(cnf['view_x1'],cnf['view_y1'],cnf['view_x2'],cnf['view_y2'],' ')
    while done == False and not shutdown():
        gotoxy(x1,y1)
        y = top
        while y1+y-top<=y2:
            if y<len(items):
                writexy(x1,y1+y-top,nc,items[y][1].ljust(x2-x1, " ")[:x2-x1])
            else:
                writexy(x1,y1+y-top,nc," ".ljust(x2-x1, " ")[:x2-x1])
            y += 1
        
        writexy(x1,y1+selbar-top,hc,items[selbar][1].ljust(x2-x1, " ")[:x2-x1])
        #writexy(28,3,15,items[selbar][1].ljust(50,' ')[:50])
        # writexy(34,4,15,str(formatsize(items[selbar]['size'])).ljust(10,' '))
        # writexy(34,5,15,datestr(dated2u(items[selbar]["date"]), "NNN DD YYYY HH:II:SS").ljust(30,' '))
        # writexy(38,6,15,items[selbar]['user'].ljust(17,' '))
        # writexy(67,6,15,str(items[selbar]['dl']).ljust(5,' '))
        #cleararea(cnf['view_x1'],cnf['view_y1'],cnf['view_x2'],cnf['view_y2'],' ')

#(1, u'Another Droid BBS', u'andr01d.zapto.org', u'Raspberry Pi', 333, u'11111011111111111111111111111111;',
# 11, 0, 9326, u'15:15:18', 2225, u'xqtr', 2, u'null;[LOC] BBS;[LOC] Hacking;[LOC] HAM Radio;[LOC] Prepping/Survival;[NET] FsxNet;[NET] DoreNet;[NET] SciNet;[LOC] Torrentz;[LOC] Roms;[NET] Zer0Net;', 
# u'', u'2023-10-01', 5, u'Mystic 1.12 A47', u'Raspberry Pi', u'Another Droid [English];fsxNet;DoreNet;AgoraNet;ZeroNet;SciNet;', u'fsxnet;zeronet;scinet;')]
        if redraw:
          tempfile = cfg['temp']+'tmp.ans'
          with open(tempfile,'w') as fl:
            fl.write('\n')
            fl.write('\x1b[1;30mLast Seen on NetWork\n')
            fl.write('\x1b[0;37m'+items[selbar][15].rjust(width)+'\n')
            fl.write('\x1b[1;33mName \x1b[1;30m'+chr(196)*(width-5)+chr(191)+'\n')
            fl.write('\x1b[1;37m'+items[selbar][1].rjust(width)+'\n')
            fl.write('\x1b[1;33mAddress \x1b[1;30m'+chr(196)*(width-8)+chr(191)+'\n')
            fl.write('\x1b[1;37m'+items[selbar][2].rjust(width)+'\n')
            fl.write('\x1b[1;33mLocation \x1b[1;30m'+chr(196)*(width-9)+chr(191)+'\n')
            fl.write('\x1b[1;37m'+items[selbar][14].rjust(width)+'\n')
            fl.write('\x1b[1;33mSysop \x1b[1;30m'+chr(196)*(width-6)+chr(191)+'\n')
            fl.write('\x1b[1;37m'+items[selbar][11].rjust(width)+'\n')
            fl.write('\x1b[1;33mSoftware \x1b[1;30m'+chr(196)*(width-9)+chr(191)+'\n')
            fl.write('\x1b[1;37m'+items[selbar][17].rjust(width)+'\n')
            fl.write('\x1b[1;33mOperating System\n')
            fl.write('\x1b[1;37m'+items[selbar][18].rjust(width)+'\n')
            fl.write('\x1b[1;33mNodes\n')
            fl.write(str(items[selbar][16]).rjust(width)+'\n')
            fl.write('Total Themes\n')
            fl.write(str(items[selbar][12]).rjust(width)+'\n')
            fl.write('Total Users\n')
            fl.write(str(items[selbar][4]).rjust(width)+'\n')
            fl.write('Total Calls\n')
            fl.write(str(items[selbar][8]).rjust(width)+'\n')
            fl.write('Total Days Online\n')
            fl.write(str(items[selbar][10]).rjust(width)+'\n')
            fl.write('Calls Last 7 Days\n')
            fl.write(str(items[selbar][6]).rjust(width)+'\n')
            fl.write('Users Last 7 Days\n')
            fl.write(str(items[selbar][7]).rjust(width)+'\n')
            fl.write('Echonets\n')
            en = items[selbar][20].split(';')
            if en:
              for e in en:
                fl.write(e.rjust(width)+'\n')
            else:
              fl.write('Not Available'.rjust(width)+'\n')
            fl.write('Message Bases\n')
            en = items[selbar][19].split(';')
            if en:
              for e in en:
                fl.write(e.rjust(width)+'\n')
            else:
              fl.write('Not Available'.rjust(width)+'\n')
            fl.write('File Bases\n')
            en = items[selbar][13].split(';')
            if en:
              for e in en:
                fl.write(e.rjust(width)+'\n')
            else:
              fl.write('Not Available'.rjust(width)+'\n')
            
            for i in range(5): fl.write('\n')
              
          av = ansiviewer.ansiviewer(tempfile)
          av.x1 = cnf['view_x1']
          av.x2 = cnf['view_x2']
          av.y1 = cnf['view_y1']
          av.y2 = cnf['view_y2']-1
          av.drawansi()
        
              
        updatebar()
        gotoxy(1,25)
        
        key, extended = getkey()
        
        if extended:
        
          if key == KEY_UP:
              dizi = 0
              selbar=selbar-1
              if selbar < 1:
                  selbar = 0
              if selbar < top:
                  top = selbar
              redraw=True
          elif key == KEY_PGUP:
              dizi = 0
              selbar = selbar - (y2-y1)
              if selbar < 0:
                  selbar = 0
                  top = 0
              else:
                  top = top - (y2-y1)
                  if top < 0:
                      top = 0
              redraw=True
          elif key == KEY_PGDN:
              dizi = 0
              selbar = selbar+(y2-y1)
              if selbar > len(items)-1:
                  selbar = len(items)-1
              top = top+(y2-y1)
              if top > len(items)-1-(y2-y1):
                  top = len(items)-1-(y2-y1)
                  if top < 0:
                      top = 0
              redraw=True
          elif key == KEY_END:
              dizi = 0
              selbar=len(items)-1
              if len(items)-(y2-y1)-1 > 0:
                  top = len(items)-(y2-y1)-1
              else:
                  top = 0
              redraw=True
          elif key == KEY_HOME:
              dizi = 0
              selbar=0
              top = 0
              redraw=True
          elif key == KEY_DOWN: 
              dizi = 0
              selbar=selbar+1
              if selbar > len(items)-1:
                  selbar = len(items)-1
              if selbar > top+y2-y1:
                  top += 1
              redraw=True
          elif key == KEY_LEFT:
              av.moveup()
              av.drawansi()
              redraw=False
          elif key == KEY_RIGHT:
              av.movedown()
              av.drawansi()
              redraw=False
        else:
          key = key.upper()
          if key == KEY_ESCAPE:
              done = True
          elif key == 'H':    
              write('|07|16|CL')
              showfile(appdir+'images'+os.sep+'help.ans',0,False,False,False)
              getkey()
              drawbg(name)
            
    return value    
  
drawbg('hello')
treelist(loadlist('list.csv'),cnf['tree_x1'],cnf['tree_y1'],cnf['tree_x2'],cnf['tree_y2'])
gotoxy(1,24)
